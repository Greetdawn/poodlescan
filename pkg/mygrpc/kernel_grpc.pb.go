// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: kernel.proto

package mygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KernelClient is the client API for Kernel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KernelClient interface {
	SendOrder(ctx context.Context, in *SendOrderRequest, opts ...grpc.CallOption) (Kernel_SendOrderClient, error)
	PleaseOpenLog(ctx context.Context, in *Please, opts ...grpc.CallOption) (Kernel_PleaseOpenLogClient, error)
}

type kernelClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelClient(cc grpc.ClientConnInterface) KernelClient {
	return &kernelClient{cc}
}

func (c *kernelClient) SendOrder(ctx context.Context, in *SendOrderRequest, opts ...grpc.CallOption) (Kernel_SendOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kernel_ServiceDesc.Streams[0], "/mygrpc.Kernel/SendOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelSendOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_SendOrderClient interface {
	Recv() (*SendOrderReply, error)
	grpc.ClientStream
}

type kernelSendOrderClient struct {
	grpc.ClientStream
}

func (x *kernelSendOrderClient) Recv() (*SendOrderReply, error) {
	m := new(SendOrderReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelClient) PleaseOpenLog(ctx context.Context, in *Please, opts ...grpc.CallOption) (Kernel_PleaseOpenLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kernel_ServiceDesc.Streams[1], "/mygrpc.Kernel/PleaseOpenLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelPleaseOpenLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_PleaseOpenLogClient interface {
	Recv() (*LogInfoReply, error)
	grpc.ClientStream
}

type kernelPleaseOpenLogClient struct {
	grpc.ClientStream
}

func (x *kernelPleaseOpenLogClient) Recv() (*LogInfoReply, error) {
	m := new(LogInfoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KernelServer is the server API for Kernel service.
// All implementations must embed UnimplementedKernelServer
// for forward compatibility
type KernelServer interface {
	SendOrder(*SendOrderRequest, Kernel_SendOrderServer) error
	PleaseOpenLog(*Please, Kernel_PleaseOpenLogServer) error
	mustEmbedUnimplementedKernelServer()
}

// UnimplementedKernelServer must be embedded to have forward compatible implementations.
type UnimplementedKernelServer struct {
}

func (UnimplementedKernelServer) SendOrder(*SendOrderRequest, Kernel_SendOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedKernelServer) PleaseOpenLog(*Please, Kernel_PleaseOpenLogServer) error {
	return status.Errorf(codes.Unimplemented, "method PleaseOpenLog not implemented")
}
func (UnimplementedKernelServer) mustEmbedUnimplementedKernelServer() {}

// UnsafeKernelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelServer will
// result in compilation errors.
type UnsafeKernelServer interface {
	mustEmbedUnimplementedKernelServer()
}

func RegisterKernelServer(s grpc.ServiceRegistrar, srv KernelServer) {
	s.RegisterService(&Kernel_ServiceDesc, srv)
}

func _Kernel_SendOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).SendOrder(m, &kernelSendOrderServer{stream})
}

type Kernel_SendOrderServer interface {
	Send(*SendOrderReply) error
	grpc.ServerStream
}

type kernelSendOrderServer struct {
	grpc.ServerStream
}

func (x *kernelSendOrderServer) Send(m *SendOrderReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Kernel_PleaseOpenLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Please)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).PleaseOpenLog(m, &kernelPleaseOpenLogServer{stream})
}

type Kernel_PleaseOpenLogServer interface {
	Send(*LogInfoReply) error
	grpc.ServerStream
}

type kernelPleaseOpenLogServer struct {
	grpc.ServerStream
}

func (x *kernelPleaseOpenLogServer) Send(m *LogInfoReply) error {
	return x.ServerStream.SendMsg(m)
}

// Kernel_ServiceDesc is the grpc.ServiceDesc for Kernel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kernel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpc.Kernel",
	HandlerType: (*KernelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendOrder",
			Handler:       _Kernel_SendOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PleaseOpenLog",
			Handler:       _Kernel_PleaseOpenLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kernel.proto",
}
